// automatically generated by the FlatBuffers compiler, do not modify

package teste

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Equipment struct {
	_tab flatbuffers.Table
}

func GetRootAsEquipment(buf []byte, offset flatbuffers.UOffsetT) *Equipment {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Equipment{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Equipment) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Equipment) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Equipment) Uuid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Equipment) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Equipment) Nickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Equipment) Level() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Equipment) MutateLevel(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func (rcv *Equipment) Rarity() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Equipment) MutateRarity(n int8) bool {
	return rcv._tab.MutateInt8Slot(12, n)
}

func (rcv *Equipment) Type() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Equipment) MutateType(n int8) bool {
	return rcv._tab.MutateInt8Slot(14, n)
}

func (rcv *Equipment) Set() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Equipment) MutateSet(n int8) bool {
	return rcv._tab.MutateInt8Slot(16, n)
}

func (rcv *Equipment) X() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Equipment) MutateX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func (rcv *Equipment) Y() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Equipment) MutateY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(20, n)
}

func (rcv *Equipment) Z() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Equipment) MutateZ(n float32) bool {
	return rcv._tab.MutateFloat32Slot(22, n)
}

func (rcv *Equipment) Powerups(obj *Powerups, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Equipment) PowerupsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func EquipmentStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func EquipmentAddUuid(builder *flatbuffers.Builder, uuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(uuid), 0)
}
func EquipmentAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func EquipmentAddNickname(builder *flatbuffers.Builder, nickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(nickname), 0)
}
func EquipmentAddLevel(builder *flatbuffers.Builder, level int8) {
	builder.PrependInt8Slot(3, level, 0)
}
func EquipmentAddRarity(builder *flatbuffers.Builder, rarity int8) {
	builder.PrependInt8Slot(4, rarity, 0)
}
func EquipmentAddType(builder *flatbuffers.Builder, type_ int8) {
	builder.PrependInt8Slot(5, type_, 0)
}
func EquipmentAddSet(builder *flatbuffers.Builder, set int8) {
	builder.PrependInt8Slot(6, set, 0)
}
func EquipmentAddX(builder *flatbuffers.Builder, x float32) {
	builder.PrependFloat32Slot(7, x, 0.0)
}
func EquipmentAddY(builder *flatbuffers.Builder, y float32) {
	builder.PrependFloat32Slot(8, y, 0.0)
}
func EquipmentAddZ(builder *flatbuffers.Builder, z float32) {
	builder.PrependFloat32Slot(9, z, 0.0)
}
func EquipmentAddPowerups(builder *flatbuffers.Builder, powerups flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(powerups), 0)
}
func EquipmentStartPowerupsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EquipmentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
