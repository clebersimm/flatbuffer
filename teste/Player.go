// automatically generated by the FlatBuffers compiler, do not modify

package teste

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Player struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayer(buf []byte, offset flatbuffers.UOffsetT) *Player {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Player{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Player) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Player) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Player) Uuid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Player) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Player) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Player) CurrentXP() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateCurrentXP(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *Player) CurrentQI() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateCurrentQI(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *Player) CurrentHP() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateCurrentHP(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *Player) Gold() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateGold(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *Player) Equipment(obj *Equipment, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Player) EquipmentLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PlayerStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func PlayerAddUuid(builder *flatbuffers.Builder, uuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(uuid), 0)
}
func PlayerAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func PlayerAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(title), 0)
}
func PlayerAddCurrentXP(builder *flatbuffers.Builder, currentXP int64) {
	builder.PrependInt64Slot(3, currentXP, 0)
}
func PlayerAddCurrentQI(builder *flatbuffers.Builder, currentQI int64) {
	builder.PrependInt64Slot(4, currentQI, 0)
}
func PlayerAddCurrentHP(builder *flatbuffers.Builder, currentHP int64) {
	builder.PrependInt64Slot(5, currentHP, 0)
}
func PlayerAddGold(builder *flatbuffers.Builder, gold int64) {
	builder.PrependInt64Slot(6, gold, 0)
}
func PlayerAddEquipment(builder *flatbuffers.Builder, equipment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(equipment), 0)
}
func PlayerStartEquipmentVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PlayerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
